/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.MatteBorder;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicComboPopup;
import javax.swing.plaf.basic.ComboPopup;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LLOST
 */
public class KhachHangFRM extends javax.swing.JPanel {

    /**
     * Creates new form KhachHangFRM
     */
    ShopForm shop;
    HoaDonFRM hd;
    ThongKeFRM thongKe;
    public KhachHangFRM(ShopForm shop) throws Exception {
        initComponents();
        tblScrollPane.getVerticalScrollBar().setUI(new MyScrollBarUI());
        comboBoxMucTimKiem = myComboBox(comboBoxMucTimKiem);
        tblKhachHang = initHeaderColor(tblKhachHang,14,142,233); 
        this.shop = shop;
        this.hd = shop.getHoaDonFRM();
        this.thongKe = shop.getThongKeFRM();
        docDatabase();
        autoGenerateID(txtMaKH);
    }
    
         public JComboBox myComboBox(JComboBox box)
    {   
        box.setRenderer(new MyComboBoxRenderer());
        box.setEditor(new MyComboBoxEditor());
        
        box.setUI(new BasicComboBoxUI() 
        {
            @Override
            protected ComboPopup createPopup() 
            {
                Color flatBlue = new Color(14,142,233);
                BasicComboPopup basicComboPopup = new BasicComboPopup(comboBox);
                basicComboPopup.setBorder(new MatteBorder(4,4,4,4,flatBlue));
                return basicComboPopup;
            }
            
            @Override 
            protected JButton createArrowButton() 
            {
                Color matteGrey = new Color(223,230,233);
                Color flatBlue = new Color(14,142,233);
        
                BasicArrowButton custom = new BasicArrowButton(
                BasicArrowButton.SOUTH, null, null, Color.WHITE, null);
                custom.setBorder(new MatteBorder(0,0,0,0,flatBlue));
                return custom;
            }
        }); 

       return box;
    }
         
         public JTable initHeaderColor(JTable List,int r,int b, int g)
    {
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(r, b, g));
        headerRenderer.setForeground(Color.WHITE);
        
            for (int i = 0; i < List.getModel().getColumnCount(); i++) 
            {
                List.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
            }
        
         
        return List;
    }
    
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightClickMenu = new javax.swing.JPopupMenu();
        xuatExcelFile = new javax.swing.JMenuItem();
        nhapExcelFile = new javax.swing.JMenuItem();
        pnlTable = new javax.swing.JPanel();
        tblScrollPane = new javax.swing.JScrollPane();
        tblKhachHang = new javax.swing.JTable();
        pnlMain = new javax.swing.JPanel();
        txtSoDT = new javax.swing.JTextField();
        lblSoDT = new javax.swing.JLabel();
        lblTieuDe = new javax.swing.JLabel();
        lblMaKH = new javax.swing.JLabel();
        lblHo = new javax.swing.JLabel();
        lblTen = new javax.swing.JLabel();
        lblDiaChi = new javax.swing.JLabel();
        txtMaKH = new javax.swing.JTextField();
        txtHo = new javax.swing.JTextField();
        txtTen = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        pnlChucNang = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnHienThiTatCa = new javax.swing.JButton();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        comboBoxMucTimKiem = new javax.swing.JComboBox<>();

        xuatExcelFile.setText("Export to excel file");
        xuatExcelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xuatExcelFileActionPerformed(evt);
            }
        });
        rightClickMenu.add(xuatExcelFile);

        nhapExcelFile.setText("Import Excel File\n");
        nhapExcelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nhapExcelFileActionPerformed(evt);
            }
        });
        rightClickMenu.add(nhapExcelFile);

        pnlTable.setBackground(new java.awt.Color(255, 255, 255));

        tblKhachHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "title 5"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblKhachHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKhachHangMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblKhachHangMouseReleased(evt);
            }
        });
        tblScrollPane.setViewportView(tblKhachHang);

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(tblScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(tblScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));
        pnlMain.setForeground(new java.awt.Color(14, 142, 233));
        pnlMain.setPreferredSize(new java.awt.Dimension(685, 274));
        pnlMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlMainMouseClicked(evt);
            }
        });

        txtSoDT.setBackground(new java.awt.Color(223, 230, 233));
        txtSoDT.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtSoDT.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        lblSoDT.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblSoDT.setForeground(new java.awt.Color(14, 142, 233));
        lblSoDT.setText("SĐT: ");

        lblTieuDe.setBackground(new java.awt.Color(255, 255, 255));
        lblTieuDe.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        lblTieuDe.setForeground(new java.awt.Color(14, 142, 233));
        lblTieuDe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTieuDe.setText("KHÁCH HÀNG");

        lblMaKH.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblMaKH.setForeground(new java.awt.Color(14, 142, 233));
        lblMaKH.setText("Mã khách hàng:");

        lblHo.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblHo.setForeground(new java.awt.Color(14, 142, 233));
        lblHo.setText("Họ:");

        lblTen.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblTen.setForeground(new java.awt.Color(14, 142, 233));
        lblTen.setText("Tên:");

        lblDiaChi.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblDiaChi.setForeground(new java.awt.Color(14, 142, 233));
        lblDiaChi.setText("Địa chỉ:");

        txtMaKH.setBackground(new java.awt.Color(223, 230, 233));
        txtMaKH.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtMaKH.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        txtHo.setBackground(new java.awt.Color(223, 230, 233));
        txtHo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtHo.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        txtTen.setBackground(new java.awt.Color(223, 230, 233));
        txtTen.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtTen.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));
        txtTen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenActionPerformed(evt);
            }
        });

        txtDiaChi.setBackground(new java.awt.Color(223, 230, 233));
        txtDiaChi.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtDiaChi.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        pnlChucNang.setBackground(new java.awt.Color(255, 255, 255));

        btnThem.setBackground(new java.awt.Color(14, 142, 233));
        btnThem.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/plus_icon.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setBorder(null);
        btnThem.setContentAreaFilled(false);
        btnThem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThem.setIconTextGap(15);
        btnThem.setOpaque(true);
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(14, 142, 233));
        btnXoa.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash_icon.png"))); // NOI18N
        btnXoa.setText("Xoá");
        btnXoa.setBorder(null);
        btnXoa.setContentAreaFilled(false);
        btnXoa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoa.setIconTextGap(15);
        btnXoa.setOpaque(true);
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(14, 142, 233));
        btnSua.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pencil_icon.png"))); // NOI18N
        btnSua.setText("Sửa");
        btnSua.setBorder(null);
        btnSua.setContentAreaFilled(false);
        btnSua.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSua.setIconTextGap(15);
        btnSua.setOpaque(true);
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlChucNangLayout = new javax.swing.GroupLayout(pnlChucNang);
        pnlChucNang.setLayout(pnlChucNangLayout);
        pnlChucNangLayout.setHorizontalGroup(
            pnlChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChucNangLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnlChucNangLayout.setVerticalGroup(
            pnlChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChucNangLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        btnHienThiTatCa.setBackground(new java.awt.Color(14, 142, 233));
        btnHienThiTatCa.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnHienThiTatCa.setForeground(new java.awt.Color(255, 255, 255));
        btnHienThiTatCa.setText("Hiển thị tất cả");
        btnHienThiTatCa.setBorder(null);
        btnHienThiTatCa.setContentAreaFilled(false);
        btnHienThiTatCa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHienThiTatCa.setOpaque(true);
        btnHienThiTatCa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHienThiTatCaActionPerformed(evt);
            }
        });

        txtTimKiem.setBackground(new java.awt.Color(223, 230, 233));
        txtTimKiem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtTimKiem.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        btnTimKiem.setBackground(new java.awt.Color(14, 142, 233));
        btnTimKiem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search_icon.png"))); // NOI18N
        btnTimKiem.setBorder(null);
        btnTimKiem.setContentAreaFilled(false);
        btnTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTimKiem.setOpaque(true);
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        comboBoxMucTimKiem.setBackground(new java.awt.Color(14, 142, 233));
        comboBoxMucTimKiem.setEditable(true);
        comboBoxMucTimKiem.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        comboBoxMucTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        comboBoxMucTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã KH", "Họ", "Tên", "Địa Chỉ", "Số ĐT", " " }));
        comboBoxMucTimKiem.setToolTipText("null");
        comboBoxMucTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        comboBoxMucTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMucTimKiemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTieuDe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSoDT, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnHienThiTatCa, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtDiaChi)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlMainLayout.createSequentialGroup()
                                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtHo, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(29, 29, 29)
                                        .addComponent(lblTen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtSoDT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnlChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                                .addComponent(comboBoxMucTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20))))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addComponent(lblTieuDe, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(pnlChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblHo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtHo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblTen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDiaChi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSoDT, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSoDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHienThiTatCa, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxMucTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    DefaultTableModel model = new DefaultTableModel() ;
    DefaultTableModel modelTimKiem;

    boolean flag = true;

    public Vector createHeader(Object[] columnNames) {
        Vector header = new Vector();
        for (Object colName : columnNames) {
            header.add(colName);
        }

        return header;
    }
    
        public void docDatabase() throws Exception {
        KhachHangBUS bus = new KhachHangBUS();
        if (NhaSanXuatBUS.getDsnsx()== null) {
            bus.docDSKH();
        }

        String[] columnNames = {"Mã khách hàng", "Họ", "Tên","Địa chỉ","Số ĐT"};
        Vector header = createHeader(columnNames);

        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }

        for (KhachHangDTO kh : KhachHangBUS.getDskh()) {
            Vector row = new Vector();
            row.add(kh.getMaKH());
            row.add(kh.getHo());
            row.add(kh.getTen());
            row.add(kh.getDiaChi());
            row.add(kh.getSoDT());

            model.addRow(row);
        }

        tblKhachHang.setModel(model);
        tblKhachHang = initHeaderColor(tblKhachHang, 14, 142, 233);

    }

    public void resetTxt() throws Exception {
        autoGenerateID(txtMaKH);
        txtHo.setText("");
        txtTen.setText("");
        txtDiaChi.setText("");
        txtSoDT.setText("");
    }

    public boolean checkEmptyTxt() {
        if (txtMaKH.getText().equals("") || txtHo.getText().equals("")||txtTen.getText().equals("")||txtDiaChi.getText().equals("")||txtSoDT.getText().equals("")) {
            return true;
        }
        return false;
    }
    
    void autoGenerateID(JTextField txt) throws Exception
    {
        KhachHangBUS bus = new KhachHangBUS();
        String ID = bus.taoIdTuDong();
        txt.setText(ID);
    }

    public void hienCacNutChucNang() {
        btnThem.setEnabled(true);
        btnXoa.setEnabled(true);
        btnSua.setEnabled(true);
    }

    public void anCacNutChucNang() {
        btnThem.setEnabled(false);
        btnXoa.setEnabled(false);
        btnSua.setEnabled(false);
    }
    
    private void comboBoxMucTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMucTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxMucTimKiemActionPerformed

    private void txtTenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        if (checkEmptyTxt() == true)
        return;
        else {
            KhachHangBUS bus = new KhachHangBUS();

            if (bus.kiemTraTrung(txtMaKH.getText())) {
                JOptionPane.showMessageDialog(this, "Mã khách hàng đã tồn tại. Mời nhập Mã nhà sản xuất khác!");
                return;
            }

            KhachHangDTO kh = new KhachHangDTO();
            kh.setMaKH(txtMaKH.getText());
            kh.setHo(txtHo.getText());
            kh.setTen(txtTen.getText());
            kh.setDiaChi(txtDiaChi.getText());
            kh.setSoDT(txtSoDT.getText());

            try {
                bus.them(kh);
            } catch (Exception ex) {
                Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
            }

            String[] columnNames = {"Mã khách hàng", "Họ", "Tên","Địa chỉ","Số ĐT"};
            Vector header = createHeader(columnNames);

            if (model.getRowCount() == 0) {
                model = new DefaultTableModel(header, 0);
            }

            Vector row = new Vector();
            row.add(kh.getMaKH());
            row.add(kh.getHo());
            row.add(kh.getTen());
            row.add(kh.getDiaChi());
            row.add(kh.getSoDT());

            model.addRow(row);
            tblKhachHang.setModel(model);
            
            String [] arrayKH = new String[KhachHangBUS.getDskh().size()];
                try {
                  arrayKH = bus.docComboBoxMaKH();
                } catch (Exception ex) {
                    Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
                }
            try {
                hd.docComboBoxKH(arrayKH);
                thongKe.docComboBoxKH(arrayKH);

            } catch (Exception ex) {
                Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
            }   
            
            JOptionPane.showMessageDialog(this, "Thêm thành công!");
            try {
                resetTxt();
            } catch (Exception ex) {
                Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        int i = tblKhachHang.getSelectedRow();
        if (i >= 0) {
            int selection = JOptionPane.showConfirmDialog(this, "Bạn muốn xóa dòng này?", "Thông báo xác nhận", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (selection == JOptionPane.YES_OPTION) {
                KhachHangBUS bus = new KhachHangBUS();
                if (flag == true) {
                    String maKH = model.getValueAt(i, 0).toString();
                    try {
                        bus.xoa(maKH);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Bạn không thể xóa dòng này!");
                        return;
                    }

                    model.removeRow(i);
                    tblKhachHang.setModel(model);
                }
                else
                {
                    String maKH = modelTimKiem.getValueAt(i, 0).toString();
                    try {
                        bus.xoa(maKH);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Bạn không thể xóa dòng này!");
                        return;
                    }

                    int index = bus.timIndex(maKH);

                    modelTimKiem.removeRow(i);
                    tblKhachHang.setModel(modelTimKiem);

                    model.removeRow(index);
                }

                btnXoa.setEnabled(false);
                btnSua.setEnabled(false);
                
                String [] arrayKH = new String[KhachHangBUS.getDskh().size()];
                try {
                  arrayKH = bus.docComboBoxMaKH();
                } catch (Exception ex) {
                    Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    hd.docComboBoxKH(arrayKH);
                    thongKe.docComboBoxKH(arrayKH);

                } catch (Exception ex) {
                    Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
                }
            
                JOptionPane.showMessageDialog(this, "Xóa thành công!");
                try {
                    resetTxt();
                } catch (Exception ex) {
                    Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        int temp = -1;
        int i = tblKhachHang.getSelectedRow();
        if (i >= 0) {
            KhachHangBUS bus = new KhachHangBUS();
            String maKHCu;
            if (flag == true) {
                maKHCu = model.getValueAt(i, 0).toString();
            } else {
                temp = i;
                maKHCu = modelTimKiem.getValueAt(temp, 0).toString();
                i = bus.timIndex(maKHCu);
            }

            if (bus.kiemTraTrung(txtMaKH.getText(), maKHCu)) {
                JOptionPane.showMessageDialog(this, "Mã khách hàng đã tồn tại. Mời nhập Mã nhà sản xuất khác!");
                return;
            } else {

                KhachHangDTO kh = new KhachHangDTO();
                kh.setMaKH(txtMaKH.getText());
                kh.setHo(txtHo.getText());
                kh.setTen(txtTen.getText());
                kh.setDiaChi(txtDiaChi.getText());
                kh.setSoDT(txtSoDT.getText());

                KhachHangDTO old = KhachHangBUS.getDskh().get(i);

                try {
                    bus.sua(kh, old);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Bạn không thể thay đổi Mã nhà sản xuất này!");
                    return;
                }

                model.setValueAt(kh.getMaKH(), i, 0);
                model.setValueAt(kh.getHo(), i, 1);
                model.setValueAt(kh.getTen(), i, 2);
                model.setValueAt(kh.getDiaChi(), i, 3);
                model.setValueAt(kh.getSoDT(), i, 4);

                if (flag == false) {
                    modelTimKiem.setValueAt(kh.getMaKH(), temp, 0);
                    modelTimKiem.setValueAt(kh.getHo(), temp, 1);
                    modelTimKiem.setValueAt(kh.getTen(), temp, 2);
                    modelTimKiem.setValueAt(kh.getDiaChi(), temp, 3);
                    modelTimKiem.setValueAt(kh.getSoDT(), temp, 4);
                }

                hienCacNutChucNang();

                String [] arrayKH = new String[KhachHangBUS.getDskh().size()];
                try {
                  arrayKH = bus.docComboBoxMaKH();
                } catch (Exception ex) {
                    Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    hd.docComboBoxKH(arrayKH);
                    thongKe.docComboBoxKH(arrayKH);

                } catch (Exception ex) {
                 Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
                }  
                
                JOptionPane.showMessageDialog(this, "Sửa thành công!");
                try {
                    resetTxt();
                } catch (Exception ex) {
                    Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnHienThiTatCaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHienThiTatCaActionPerformed
        // TODO add your handling code here:
        flag = true;
        tblKhachHang.setModel(model);
        btnThem.setEnabled(true);
        tblKhachHang = initHeaderColor(tblKhachHang, 14, 142, 233);
    }//GEN-LAST:event_btnHienThiTatCaActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
        String mucTimKiem = comboBoxMucTimKiem.getSelectedItem().toString();
        String duLieu = txtTimKiem.getText();

        String[] columnNames = {"Mã khách hàng", "Họ", "Tên","Địa chỉ","Số ĐT"};
        Vector header = createHeader(columnNames);

        if (duLieu.equals("") == false) {
            ArrayList<KhachHangDTO> tempArr = new ArrayList<KhachHangDTO>();
            KhachHangBUS bus = new KhachHangBUS();

            tempArr = bus.timKiem(mucTimKiem, duLieu);

            if (tempArr.size() > 0) {
                modelTimKiem = new DefaultTableModel();

                if (modelTimKiem.getRowCount() == 0) {
                    modelTimKiem = new DefaultTableModel(header, 0);
                }

                for (KhachHangDTO kh : tempArr) {
                    Vector row = new Vector();
                    row.add(kh.getMaKH());
                    row.add(kh.getHo());
                    row.add(kh.getTen());
                    row.add(kh.getDiaChi());
                    row.add(kh.getSoDT());

                    modelTimKiem.addRow(row);
                }
                tblKhachHang.setModel(modelTimKiem);
                tblKhachHang = initHeaderColor(tblKhachHang, 14, 142, 233);

                flag = false;
                anCacNutChucNang();

            } else {
                JOptionPane.showMessageDialog(this, "Rất tiếc. Dữ liệu không được tìm thấy!");
            }
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void pnlMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlMainMouseClicked
        // TODO add your handling code here:
        try {
            resetTxt();
        } catch (Exception ex) {
            Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
        }

        tblKhachHang.clearSelection();
    }//GEN-LAST:event_pnlMainMouseClicked

    private void tblKhachHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKhachHangMouseClicked
        // TODO add your handling code here:
        int i = tblKhachHang.getSelectedRow();
        if (i >= 0) {
            KhachHangBUS bus = new KhachHangBUS();
            KhachHangDTO kh = new KhachHangDTO();

            if (flag == true) {
                kh = KhachHangBUS.getDskh().get(i);
            } else {
                int index = bus.timIndex(modelTimKiem.getValueAt(i, 0).toString());
                kh = KhachHangBUS.getDskh().get(index);
            }

            txtMaKH.setText(kh.getMaKH());
            txtHo.setText(kh.getHo());
            txtTen.setText(kh.getTen());
            txtDiaChi.setText(kh.getDiaChi());
            txtSoDT.setText(kh.getSoDT());
            
            btnXoa.setEnabled(true);
            btnSua.setEnabled(true);
        }
    }//GEN-LAST:event_tblKhachHangMouseClicked

    private void xuatExcelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xuatExcelFileActionPerformed
        String[] columnNames = {"Mã khách hàng", "Họ", "Tên", "Địa chỉ","Số điện thoại"};
        try {
            XuatExcel xuat = new XuatExcel(tblKhachHang, columnNames, "Khách Hàng");
        } catch (IOException ex) {
            Logger.getLogger(KhachHangFRM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_xuatExcelFileActionPerformed

    private void tblKhachHangMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKhachHangMouseReleased
        if(evt.isPopupTrigger())
        {
            rightClickMenu.show(tblKhachHang, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblKhachHangMouseReleased

    private void nhapExcelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhapExcelFileActionPerformed
        // TODO add your handling code here:
        nhapExcel nhap = new nhapExcel(tblKhachHang);
        DefaultTableModel newModel = nhap.importExcel();
        if(newModel.getRowCount() > 0)
        {
            tblKhachHang.setModel(newModel);
            tblKhachHang = initHeaderColor(tblKhachHang, 14, 142, 233);
        }
    }//GEN-LAST:event_nhapExcelFileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHienThiTatCa;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> comboBoxMucTimKiem;
    private javax.swing.JLabel lblDiaChi;
    private javax.swing.JLabel lblHo;
    private javax.swing.JLabel lblMaKH;
    private javax.swing.JLabel lblSoDT;
    private javax.swing.JLabel lblTen;
    private javax.swing.JLabel lblTieuDe;
    private javax.swing.JMenuItem nhapExcelFile;
    private javax.swing.JPanel pnlChucNang;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JPopupMenu rightClickMenu;
    private javax.swing.JTable tblKhachHang;
    private javax.swing.JScrollPane tblScrollPane;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtHo;
    private javax.swing.JTextField txtMaKH;
    private javax.swing.JTextField txtSoDT;
    private javax.swing.JTextField txtTen;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JMenuItem xuatExcelFile;
    // End of variables declaration//GEN-END:variables
}
