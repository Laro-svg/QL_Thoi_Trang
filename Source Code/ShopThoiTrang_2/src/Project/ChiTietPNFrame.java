/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project;
import static com.sun.java.accessibility.util.AWTEventMonitor.addWindowListener;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.border.MatteBorder;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicComboPopup;
import javax.swing.plaf.basic.ComboPopup;
import javax.swing.table.DefaultTableCellRenderer;
import com.toedter.calendar.JDateChooser;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kossp
 */
public class ChiTietPNFrame extends javax.swing.JFrame {
    Color flatBlue = new Color(14, 142, 233);
    Color matteGrey = new Color(223, 230, 233);
    /**
     * Creates new form ChiTietPNFrame
     */
    
    PhieuNhapFRM parent;
    SanPhamFRM spFRM;
    boolean parentAllBtnClicked;
    
    public ChiTietPNFrame(ShopForm shop, String maPN) throws Exception {
        initComponents();
        this.parent = shop.getPhieuNhapFRM();
        this.spFRM = shop.getSanPhamFRM();
        tblScrollPane.getVerticalScrollBar().setUI(new MyScrollBarUI());
        comboBoxMucTimKiem = myComboBox(comboBoxMucTimKiem, flatBlue);
        tblChiTietPN = initHeaderColor(tblChiTietPN,14,142,233); 
        tblChiTietPN.setDefaultEditor(Object.class, null);
        docComboBox();
        setTxtDonGia(ComboBoxMaSP.getSelectedItem().toString());
        if(maPN == null)
            parentAllBtnClicked = true;
        else
            parentAllBtnClicked = false;
        docDatabase(maPN);
    }

    private ChiTietPNFrame(Object object) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public JDateChooser myDateChooser(JDateChooser chooser)
    {   
        JTextFieldDateEditor dateChooserEditor = ((JTextFieldDateEditor)chooser.getDateEditor());
        dateChooserEditor.setBackground(matteGrey);
        dateChooserEditor.setBorder(new MatteBorder(3,3,3,3,matteGrey));
        dateChooserEditor.setEditable(false);
        return chooser;
    }
     
     public JComboBox myComboBox(JComboBox box, Color color)
    {   
        box.setRenderer(new MyComboBoxRenderer());
        box.setEditor(new MyComboBoxEditor());
        
        box.setUI(new BasicComboBoxUI() 
        {
            @Override
            protected ComboPopup createPopup() 
            {
                BasicComboPopup basicComboPopup = new BasicComboPopup(comboBox);
                basicComboPopup.setBorder(new MatteBorder(4,4,4,4,color));
                return basicComboPopup;
            }
            
            @Override 
            protected JButton createArrowButton() 
            {
                Color matteGrey = new Color(223,230,233);
                Color flatBlue = new Color(14,142,233);
        
                BasicArrowButton custom = new BasicArrowButton(
                BasicArrowButton.SOUTH, null, null, Color.WHITE, null);
                custom.setBorder(new MatteBorder(0,0,0,0,flatBlue));
                return custom;
            }
        }); 

       return box;
    }
    public JTable initHeaderColor(JTable List,int r,int b, int g)
    {
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(r, b, g));
        headerRenderer.setForeground(Color.WHITE);
        
            for (int i = 0; i < List.getModel().getColumnCount(); i++) 
            {
                List.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
            }
        
         
        return List;
    }
    public void resetTxt() {
        txtSoLuong.setText("");
    }
    
    public void setTxtDonGia(String maSP)
    {
        SanPhamBUS spBus = new SanPhamBUS();
        txtDonGia.setText(Float.toString(spBus.timSP(maSP).getDonGia()));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
            
    DefaultTableModel model = new DefaultTableModel() ;
    DefaultTableModel modelTimKiem;

    boolean flag = true;

    public Vector createHeader(Object[] columnNames) {
        Vector header = new Vector();
        for (Object colName : columnNames) {
            header.add(colName);
        }

        return header;
    }
    
    public void docComboBox() throws Exception{
        SanPhamBUS busMaSP = new SanPhamBUS();
        PhieuNhapBUS busMaPN = new PhieuNhapBUS();
        String[] arrayMaSP = busMaSP.docComboBoxMaSP();
        String[] arrayMaPN = busMaPN.docComboBoxMaPN();
        ComboBoxMaSP.setModel(new javax.swing.DefaultComboBoxModel<>(arrayMaSP));
        ComboBoxMaSP = myComboBox(ComboBoxMaSP,matteGrey);
        ComboBoxMaPN.setModel(new javax.swing.DefaultComboBoxModel<>(arrayMaPN));
        ComboBoxMaPN = myComboBox(ComboBoxMaPN,matteGrey);
    }
    
    public void docComboBoxMaSP(String ma[]) throws Exception{
        ComboBoxMaSP.setModel(new javax.swing.DefaultComboBoxModel<>(ma));
    }
    
    public void docDatabase() throws Exception {
        ChiTietPNBUS bus = new ChiTietPNBUS();
        if (ChiTietPNBUS.getDsctpn()== null) {
            bus.docDSCTPN();
        }

        String[] columnNames = {"Mã phiếu nhập", "Mã sản phẩm", "Số lượng", "Đơn giá"};
        Vector header = createHeader(columnNames);

        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }

        for (ChiTietPNDTO ctpn : ChiTietPNBUS.getDsctpn()) {
            Vector row = new Vector();
            row.add(ctpn.getMaPN());
            row.add(ctpn.getMaSP());
            row.add(ctpn.getSoLuong());
            row.add(ctpn.getDonGia());
    
            model.addRow(row);
        }

        tblChiTietPN.setModel(model);
        tblChiTietPN = initHeaderColor(tblChiTietPN, 14, 142, 233);

    }
    
    public void docDatabase(String maPN) throws Exception {
        String[] columnNames = {"Mã phiếu nhập", "Mã sản phẩm", "Số lượng", "Đơn giá"};
        Vector header = createHeader(columnNames);

        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }
        
        ArrayList<ChiTietPNDTO> arr;
        ChiTietPNBUS bus = new ChiTietPNBUS();
        
        if(maPN == null)
        {
            bus.docDSCTPN();
        }
        else 
        {
            bus.docCTPN(maPN);
            ComboBoxMaPN.setSelectedItem(maPN);
            ComboBoxMaPN.setEnabled(false);
        }

        for (ChiTietPNDTO ctpn : ChiTietPNBUS.getDsctpn()) {
            Vector row = new Vector();
            row.add(ctpn.getMaPN());
            row.add(ctpn.getMaSP());
            row.add(ctpn.getSoLuong());
            row.add(ctpn.getDonGia());
    
            model.addRow(row);
        }

        tblChiTietPN.setModel(model);
        tblChiTietPN = initHeaderColor(tblChiTietPN, 14, 142, 233);

    }
    
    public boolean checkEmptyTxt() {
        if (txtSoLuong.getText().equals("") || txtDonGia.getText().equals(""))
            return true;
        return false;
    }
        
    public void hienCacNutChucNang() {
        btnThem.setEnabled(true);
        btnSua.setEnabled(true);
        btnXoa.setEnabled(true);
    }

    public void anCacNutChucNang() {
        btnThem.setEnabled(false);
        btnSua.setEnabled(false);
        btnXoa.setEnabled(false);
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightClickMenu = new javax.swing.JPopupMenu();
        xuatExcelFile = new javax.swing.JMenuItem();
        nhapExcelFile = new javax.swing.JMenuItem();
        pnlTable = new javax.swing.JPanel();
        tblScrollPane = new javax.swing.JScrollPane();
        tblChiTietPN = new javax.swing.JTable();
        pnlMain = new javax.swing.JPanel();
        lblTieuDe = new javax.swing.JLabel();
        lblMaPN = new javax.swing.JLabel();
        lblMaSP = new javax.swing.JLabel();
        lblSoLuong = new javax.swing.JLabel();
        pnlChucNang = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnHienThiTatCa = new javax.swing.JButton();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        comboBoxMucTimKiem = new javax.swing.JComboBox<>();
        txtDonGia = new javax.swing.JTextField();
        lblDonGia = new javax.swing.JLabel();
        txtSoLuong = new javax.swing.JTextField();
        ComboBoxMaSP = new javax.swing.JComboBox<>();
        ComboBoxMaPN = new javax.swing.JComboBox<>();

        xuatExcelFile.setText("Export to excel file");
        xuatExcelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xuatExcelFileActionPerformed(evt);
            }
        });
        rightClickMenu.add(xuatExcelFile);

        nhapExcelFile.setText("jMenuItem1");
        nhapExcelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nhapExcelFileActionPerformed(evt);
            }
        });
        rightClickMenu.add(nhapExcelFile);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlTable.setBackground(new java.awt.Color(255, 255, 255));

        tblChiTietPN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblChiTietPN.setSelectionBackground(new java.awt.Color(14, 142, 233));
        tblChiTietPN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblChiTietPNMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblChiTietPNMouseReleased(evt);
            }
        });
        tblScrollPane.setViewportView(tblChiTietPN);

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(tblScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tblScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));
        pnlMain.setForeground(new java.awt.Color(14, 142, 233));
        pnlMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlMainMouseClicked(evt);
            }
        });

        lblTieuDe.setBackground(new java.awt.Color(255, 255, 255));
        lblTieuDe.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        lblTieuDe.setForeground(new java.awt.Color(14, 142, 233));
        lblTieuDe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTieuDe.setText("CHI TIẾT PHIẾU NHẬP");

        lblMaPN.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        lblMaPN.setForeground(new java.awt.Color(14, 142, 233));
        lblMaPN.setText("Mã phiếu nhập:");

        lblMaSP.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        lblMaSP.setForeground(new java.awt.Color(14, 142, 233));
        lblMaSP.setText("Mã sản phẩm:");

        lblSoLuong.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        lblSoLuong.setForeground(new java.awt.Color(14, 142, 233));
        lblSoLuong.setText("Số lượng:");

        pnlChucNang.setBackground(new java.awt.Color(255, 255, 255));

        btnThem.setBackground(new java.awt.Color(14, 142, 233));
        btnThem.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/plus_icon.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setBorder(null);
        btnThem.setContentAreaFilled(false);
        btnThem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThem.setIconTextGap(15);
        btnThem.setOpaque(true);
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(14, 142, 233));
        btnXoa.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash_icon.png"))); // NOI18N
        btnXoa.setText("Xoá");
        btnXoa.setBorder(null);
        btnXoa.setContentAreaFilled(false);
        btnXoa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoa.setEnabled(false);
        btnXoa.setIconTextGap(15);
        btnXoa.setOpaque(true);
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(14, 142, 233));
        btnSua.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pencil_icon.png"))); // NOI18N
        btnSua.setText("Sửa");
        btnSua.setBorder(null);
        btnSua.setContentAreaFilled(false);
        btnSua.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSua.setEnabled(false);
        btnSua.setIconTextGap(15);
        btnSua.setOpaque(true);
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlChucNangLayout = new javax.swing.GroupLayout(pnlChucNang);
        pnlChucNang.setLayout(pnlChucNangLayout);
        pnlChucNangLayout.setHorizontalGroup(
            pnlChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlChucNangLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(pnlChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnXoa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnThem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .addComponent(btnSua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        pnlChucNangLayout.setVerticalGroup(
            pnlChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChucNangLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        btnHienThiTatCa.setBackground(new java.awt.Color(14, 142, 233));
        btnHienThiTatCa.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnHienThiTatCa.setForeground(new java.awt.Color(255, 255, 255));
        btnHienThiTatCa.setText("Hiển thị tất cả");
        btnHienThiTatCa.setBorder(null);
        btnHienThiTatCa.setContentAreaFilled(false);
        btnHienThiTatCa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHienThiTatCa.setOpaque(true);
        btnHienThiTatCa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHienThiTatCaActionPerformed(evt);
            }
        });

        txtTimKiem.setBackground(new java.awt.Color(223, 230, 233));
        txtTimKiem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtTimKiem.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        btnTimKiem.setBackground(new java.awt.Color(14, 142, 233));
        btnTimKiem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search_icon.png"))); // NOI18N
        btnTimKiem.setBorder(null);
        btnTimKiem.setContentAreaFilled(false);
        btnTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTimKiem.setOpaque(true);
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        comboBoxMucTimKiem.setBackground(new java.awt.Color(14, 142, 233));
        comboBoxMucTimKiem.setEditable(true);
        comboBoxMucTimKiem.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        comboBoxMucTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        comboBoxMucTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã PN", "Mã SP", "Số lượng", "Đơn giá" }));
        comboBoxMucTimKiem.setToolTipText("null");
        comboBoxMucTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        comboBoxMucTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMucTimKiemActionPerformed(evt);
            }
        });

        txtDonGia.setBackground(new java.awt.Color(223, 230, 233));
        txtDonGia.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtDonGia.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));
        txtDonGia.setPreferredSize(new java.awt.Dimension(7, 24));

        lblDonGia.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        lblDonGia.setForeground(new java.awt.Color(14, 142, 233));
        lblDonGia.setText("Đơn giá:");

        txtSoLuong.setBackground(new java.awt.Color(223, 230, 233));
        txtSoLuong.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtSoLuong.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));
        txtSoLuong.setPreferredSize(new java.awt.Dimension(7, 24));

        ComboBoxMaSP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxMaSPItemStateChanged(evt);
            }
        });

        ComboBoxMaPN.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxMaPNItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTieuDe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblMaSP, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                        .addComponent(lblSoLuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMaPN)
                        .addComponent(lblDonGia))
                    .addComponent(btnHienThiTatCa, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDonGia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBoxMaSP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBoxMaPN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(106, 106, 106)
                        .addComponent(pnlChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addComponent(comboBoxMucTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(lblTieuDe, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaPN, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBoxMaPN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBoxMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pnlChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboBoxMucTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(24, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHienThiTatCa, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblChiTietPNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChiTietPNMouseClicked
        int i = tblChiTietPN.getSelectedRow();
        if (i >= 0) {
            ChiTietPNDTO ctpn = new ChiTietPNDTO();
            if (flag == true) {
                ctpn.setMaPN(model.getValueAt(i, 0).toString());
                ctpn.setMaSP(model.getValueAt(i, 1).toString());
                ctpn.setSoLuong((int) model.getValueAt(i, 2));
                ctpn.setDonGia((float) model.getValueAt(i, 3));
            } else {
                ctpn.setMaPN(modelTimKiem.getValueAt(i, 0).toString());
                ctpn.setMaSP(modelTimKiem.getValueAt(i, 1).toString());
                ctpn.setSoLuong((int) modelTimKiem.getValueAt(i, 2));
                ctpn.setDonGia((float) modelTimKiem.getValueAt(i, 3));
            }

            ComboBoxMaPN.setSelectedItem(ctpn.getMaPN());
            ComboBoxMaSP.setSelectedItem(ctpn.getMaSP());
            txtSoLuong.setText(Integer.toString(ctpn.getSoLuong()));
            txtDonGia.setText(Float.toString(ctpn.getDonGia())); 

            btnXoa.setEnabled(true);
            btnSua.setEnabled(true);
        }
    }//GEN-LAST:event_tblChiTietPNMouseClicked

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        if (checkEmptyTxt() == true)
            return;
        else {
            ChiTietPNBUS bus = new ChiTietPNBUS();

            if (bus.kiemTraTrung(ComboBoxMaPN.getSelectedItem().toString(),ComboBoxMaSP.getSelectedItem().toString())) {
                JOptionPane.showMessageDialog(this, "Mã chi tiết phiếu nhập đã tồn tại. Mời nhập Mã chi tiết phiếu nhập khác!");
                return;
            }

            ChiTietPNDTO ctpn = new ChiTietPNDTO();
            ctpn.setMaPN(ComboBoxMaPN.getSelectedItem().toString());
            ctpn.setMaSP(ComboBoxMaSP.getSelectedItem().toString());
            ctpn.setSoLuong(Integer.parseInt(txtSoLuong.getText()));
            ctpn.setDonGia(Float.parseFloat(txtDonGia.getText()));
            
            try {
                bus.them(ctpn);
            } catch (Exception ex) {
                Logger.getLogger(ChiTietPNFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            String[] columnNames = {"Mã phiếu nhập", "Mã sản phẩm", "Số lượng", "Đơn giá"};
            Vector header = createHeader(columnNames);

            if (model.getRowCount() == 0) {
                model = new DefaultTableModel(header, 0);
            }

            Vector row = new Vector();
            row.add(ctpn.getMaPN());
            row.add(ctpn.getMaSP());
            row.add(ctpn.getSoLuong());
            row.add(ctpn.getDonGia());

            model.addRow(row);
            tblChiTietPN.setModel(model);

            String ma_sp = ctpn.getMaSP();
            int so_luong = ctpn.getSoLuong();
            
            SanPhamBUS spBus = new SanPhamBUS();
            try {
                spBus.nhapSP(ma_sp, so_luong);
            } catch (Exception ex) {
                Logger.getLogger(ChiTietHDFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            spFRM.refreshTableRowSoLuong(ma_sp);

            try {
                parent.resetMoney(ctpn.getMaPN());
            } catch (Exception ex) {
                Logger.getLogger(ChiTietHDFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            JOptionPane.showMessageDialog(this, "Thêm thành công!");
            try {
                resetTxt();
            } catch (Exception ex) {
                Logger.getLogger(ChiTietPNFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        int i = tblChiTietPN.getSelectedRow();
        if (i >= 0) {
            int selection = JOptionPane.showConfirmDialog(this, "Bạn muốn xóa dòng này?", "Thông báo xác nhận", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (selection == JOptionPane.YES_OPTION) {
                String ma_pn;
                String ma_sp;
                int so_luong;
                
                ChiTietPNBUS bus = new ChiTietPNBUS();
                if (flag == true)
                {
                    String maPN = model.getValueAt(i, 0).toString();
                    String maSP = model.getValueAt(i, 1).toString();
                    
                    ma_pn = maPN;
                    ma_sp = maSP;
                    so_luong = bus.timCTPN(maPN, maSP).getSoLuong();
                    
                    try {
                        bus.xoa(maPN,maSP);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Bạn không thể xóa dòng này!");
                        return;
                    }

                    model.removeRow(i); 
                    tblChiTietPN.setModel(model);
                }
                else
                {
                    String maPN = modelTimKiem.getValueAt(i, 0).toString();
                    String maSP = modelTimKiem.getValueAt(i, 1).toString();
                    
                    ma_pn = maPN;
                    ma_sp = maSP;
                    so_luong = bus.timCTPN(maPN, maSP).getSoLuong();
                    
                    try {
                        bus.xoa(maPN,maSP);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Bạn không thể xóa dòng này!");
                        return;
                    }

                    int index = bus.timIndex(maPN,maSP);

                    modelTimKiem.removeRow(i);
                    tblChiTietPN.setModel(modelTimKiem);

                    model.removeRow(index);
                }
                
                SanPhamBUS spBus = new SanPhamBUS();
                try {
                    spBus.laySP(ma_sp, so_luong);
                } catch (Exception ex) {
                    Logger.getLogger(ChiTietPNFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                spFRM.refreshTableRowSoLuong(ma_sp);
                
                try {
                    parent.resetMoney(ma_pn);
                } catch (Exception ex) {
                    Logger.getLogger(ChiTietPNFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

                btnXoa.setEnabled(false);
                btnSua.setEnabled(false);
                JOptionPane.showMessageDialog(this, "Xóa thành công!");
                try {
                    resetTxt();
                } catch (Exception ex) {
                    Logger.getLogger(ChiTietPNFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
            }
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int temp = -1;
        int i = tblChiTietPN.getSelectedRow();
        if (i >= 0) {
            ChiTietPNBUS bus = new ChiTietPNBUS();
            String maPNCu;
            String maSPCu;
            if (flag == true) {
                maPNCu = model.getValueAt(i, 0).toString();
                maSPCu = model.getValueAt(i, 1).toString();
            } else {
                temp = i;
                maPNCu = modelTimKiem.getValueAt(temp, 0).toString();
                maSPCu = modelTimKiem.getValueAt(temp, 1).toString();
                i = bus.timIndex(maPNCu,maSPCu);
            }

            if (bus.kiemTraTrung(ComboBoxMaPN.getSelectedItem().toString(), maPNCu, ComboBoxMaSP.getSelectedItem().toString(), maSPCu)) {
                JOptionPane.showMessageDialog(this, "Mã hóa đơn và Mã sản phẩm đã tồn tại. Mời nhập Mã hóa đơn và Mã sản phẩm khác!");
                return;
            } else {

                ChiTietPNDTO ctpn = new ChiTietPNDTO();
                ctpn.setMaPN(ComboBoxMaPN.getSelectedItem().toString());
                ctpn.setMaSP(ComboBoxMaSP.getSelectedItem().toString());
                ctpn.setSoLuong(Integer.parseInt(txtSoLuong.getText()));
                ctpn.setDonGia(Float.parseFloat(txtDonGia.getText())); 

                ChiTietPNDTO old = ChiTietPNBUS.getDsctpn().get(i);
                
                String ma_sp_cu = maSPCu;
                int so_luong_cu = old.getSoLuong();
                
                String ma_sp_moi = ctpn.getMaSP();
                int so_luong_moi = ctpn.getSoLuong();

                try {
                    bus.sua(ctpn, old);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Bạn không thể thay đổi Mã phiếu nhập và mã sản phẩm này!");
                    return;
                }
                
                SanPhamBUS spBus = new SanPhamBUS();
                try {
                    spBus.laySP(ma_sp_cu, so_luong_cu);
                } catch (Exception ex) {
                    Logger.getLogger(ChiTietHDFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                spFRM.refreshTableRowSoLuong(ma_sp_cu);
                
                try {
                    spBus.nhapSP(ma_sp_moi, so_luong_moi);
                } catch (Exception ex) {
                    Logger.getLogger(ChiTietHDFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                spFRM.refreshTableRowSoLuong(ma_sp_moi);

                model.setValueAt(ctpn.getMaPN(), i, 0);
                model.setValueAt(ctpn.getMaSP(), i, 1);
                model.setValueAt(ctpn.getSoLuong(), i, 2);
                model.setValueAt(ctpn.getDonGia(), i, 3);

                if (flag == false) {
                    modelTimKiem.setValueAt(ctpn.getMaPN(), temp, 0);
                    modelTimKiem.setValueAt(ctpn.getMaSP(), temp, 1);
                    modelTimKiem.setValueAt(ctpn.getSoLuong(), temp, 2);
                    modelTimKiem.setValueAt(ctpn.getDonGia(), temp, 3);
                }
                
                PhieuNhapBUS pnBus = new PhieuNhapBUS();
                try {
                    parent.resetMoney(ctpn.getMaPN());
                } catch (Exception ex) {
                    Logger.getLogger(ChiTietHDFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

                hienCacNutChucNang();

                JOptionPane.showMessageDialog(this, "Sửa thành công!");
                try {
                    resetTxt();
                } catch (Exception ex) {
                    Logger.getLogger(ChiTietPNFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnHienThiTatCaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHienThiTatCaActionPerformed
        flag = true;
        tblChiTietPN.setModel(model);
        btnThem.setEnabled(true);
        tblChiTietPN = initHeaderColor(tblChiTietPN, 14, 142, 233);
    }//GEN-LAST:event_btnHienThiTatCaActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        String mucTimKiem = comboBoxMucTimKiem.getSelectedItem().toString();
        String duLieu = txtTimKiem.getText();

        String[] columnNames = {"Mã PN", "Mã SP", "Số lượng", "Đơn giá"};
        Vector header = createHeader(columnNames);

        if (duLieu.equals("") == false) {
            ArrayList<ChiTietPNDTO> tempArr = new ArrayList<ChiTietPNDTO>();
            ChiTietPNBUS bus = new ChiTietPNBUS();

            tempArr = bus.timKiem(mucTimKiem, duLieu);

            if (tempArr.size() > 0) {
                modelTimKiem = new DefaultTableModel();

                if (modelTimKiem.getRowCount() == 0) {
                    modelTimKiem = new DefaultTableModel(header, 0);
                }

                for (ChiTietPNDTO ctpn : tempArr) {
                    Vector row = new Vector();
                    row.add(ctpn.getMaPN());
                    row.add(ctpn.getMaSP());
                    row.add(ctpn.getSoLuong());
                    row.add(ctpn.getDonGia());

                    modelTimKiem.addRow(row);
                }
                tblChiTietPN.setModel(modelTimKiem);
                tblChiTietPN = initHeaderColor(tblChiTietPN, 14, 142, 233);

                flag = false;
                anCacNutChucNang();

            } else {
                JOptionPane.showMessageDialog(this, "Rất tiếc. Dữ liệu không được tìm thấy!");
            }
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void comboBoxMucTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMucTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxMucTimKiemActionPerformed

    private void pnlMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlMainMouseClicked
        // TODO add your handling code here:
        resetTxt();
        tblChiTietPN.clearSelection();
    }//GEN-LAST:event_pnlMainMouseClicked

    private void ComboBoxMaSPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxMaSPItemStateChanged
        setTxtDonGia(ComboBoxMaSP.getSelectedItem().toString());
    }//GEN-LAST:event_ComboBoxMaSPItemStateChanged

    private void ComboBoxMaPNItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxMaPNItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxMaPNItemStateChanged

    private void xuatExcelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xuatExcelFileActionPerformed
        String[] columnNames = {"Mã PN", "Mã SP", "Số lượng", "Đơn giá"};
        try {
            XuatExcel xuat = new XuatExcel(tblChiTietPN, columnNames, "Chi Tiết Phiếu Nhập");
        } catch (IOException ex) {
            Logger.getLogger(ChiTietPNFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_xuatExcelFileActionPerformed

    private void tblChiTietPNMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChiTietPNMouseReleased
        if(evt.isPopupTrigger())
        {
            rightClickMenu.show(tblChiTietPN, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblChiTietPNMouseReleased

    private void nhapExcelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhapExcelFileActionPerformed
        // TODO add your handling code here:
        nhapExcel nhap = new nhapExcel(tblChiTietPN);
        DefaultTableModel newModel = nhap.importExcel();
        if(newModel.getRowCount() > 0)
        {
            tblChiTietPN.setModel(newModel);
            tblChiTietPN = initHeaderColor(tblChiTietPN, 14, 142, 233);
        }
    }//GEN-LAST:event_nhapExcelFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChiTietPNFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChiTietPNFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChiTietPNFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChiTietPNFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ChiTietPNFrame(null).setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(ChiTietPNFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxMaPN;
    private javax.swing.JComboBox<String> ComboBoxMaSP;
    private javax.swing.JButton btnHienThiTatCa;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> comboBoxMucTimKiem;
    private javax.swing.JLabel lblDonGia;
    private javax.swing.JLabel lblMaPN;
    private javax.swing.JLabel lblMaSP;
    private javax.swing.JLabel lblSoLuong;
    private javax.swing.JLabel lblTieuDe;
    private javax.swing.JMenuItem nhapExcelFile;
    private javax.swing.JPanel pnlChucNang;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JPopupMenu rightClickMenu;
    private javax.swing.JTable tblChiTietPN;
    private javax.swing.JScrollPane tblScrollPane;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JMenuItem xuatExcelFile;
    // End of variables declaration//GEN-END:variables
}
