/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.MatteBorder;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicComboPopup;
import javax.swing.plaf.basic.ComboPopup;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author loith
 */
public class SanPhamFRM extends javax.swing.JPanel {
    Color matteGrey = new Color(223,230,233);
    Color flatBlue = new Color(14,142,233);
    
    ShopForm shop;
    ChiTietHDFrame cthd;
    ChiTietKMFrame ctkm;
    ChiTietPNFrame ctpn;
    ThongKeFRM thongKe;
    /**
     * Creates new form SanPhamFRM
     */
    public SanPhamFRM(ShopForm shop) throws Exception, Exception {
        initComponents();
        tblScrollPane.getVerticalScrollBar().setUI(new MyScrollBarUI());
        tblSanPham = initHeaderColor(tblSanPham,14,142,233); 
        comboBoxMucTimKiem = myComboBox(comboBoxMucTimKiem,flatBlue);
        tblSanPham.setDefaultEditor(Object.class, null);
        this.shop = shop;
        this.thongKe = shop.getThongKeFRM();
        docComboBox();
        docDatabase();
        autoGenerateID(txtMaSP);
        tblSanPham =setColumnWidth(tblSanPham);
    }
    
     public void resetTxt() throws Exception {
        autoGenerateID(txtMaSP);
        txtTenSP.setText("");
        txtSoLuong.setText("");
        txtDonGia.setText("");
        
    }
    
    public JTable setColumnWidth(JTable table)
    {         
        table.getColumnModel().getColumn(1).setPreferredWidth(170);
        table.getColumnModel().getColumn(2).setPreferredWidth(40);
        table.getColumnModel().getColumn(3).setPreferredWidth(60);
     
        return table;
    }
     public JComboBox myComboBox(JComboBox box, Color color)
    {   
        box.setRenderer(new MyComboBoxRenderer());
        box.setEditor(new MyComboBoxEditor());
        
        box.setUI(new BasicComboBoxUI() 
        {
            @Override
            protected ComboPopup createPopup() 
            {
                BasicComboPopup basicComboPopup = new BasicComboPopup(comboBox);
                basicComboPopup.setBorder(new MatteBorder(4,4,4,4,color));
                return basicComboPopup;
            }
            
            @Override 
            protected JButton createArrowButton() 
            {
                Color matteGrey = new Color(223,230,233);
                Color flatBlue = new Color(14,142,233);
        
                BasicArrowButton custom = new BasicArrowButton(
                BasicArrowButton.SOUTH, null, null, Color.WHITE, null);
                custom.setBorder(new MatteBorder(0,0,0,0,flatBlue));
                return custom;
            }
        }); 

       return box;
    }
    public JTable initHeaderColor(JTable List,int r,int b, int g)
    {
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(r, b, g));
        headerRenderer.setForeground(Color.WHITE);
        
            for (int i = 0; i < List.getModel().getColumnCount(); i++) 
            {
                List.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
            }
        
        return List;
    }
    
    public void refreshTableRowSoLuong(String maSP)
    {
        SanPhamBUS bus = new SanPhamBUS();
        int i = -1;
        if(flag == true)
        {
            i = bus.timIndex(maSP);
            model.setValueAt(bus.getDssp().get(i).getSoLuong(), i, 2);
        }
        else
        {
            for(int j = 0; j < modelTimKiem.getRowCount(); ++j)
            {
                if(modelTimKiem.getValueAt(j, 0).equals(maSP))
                    i = j;
            }
            modelTimKiem.setValueAt(bus.getDssp().get(i).getSoLuong(), i, 2);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightClickMenu = new javax.swing.JPopupMenu();
        xuatExcelFile = new javax.swing.JMenuItem();
        nhapExcelFile = new javax.swing.JMenuItem();
        pnlTable = new javax.swing.JPanel();
        tblScrollPane = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();
        pnlMain = new javax.swing.JPanel();
        lblTieuDe = new javax.swing.JLabel();
        lblMaSP = new javax.swing.JLabel();
        lblTenSP = new javax.swing.JLabel();
        lblMaLSP = new javax.swing.JLabel();
        txtMaSP = new javax.swing.JTextField();
        txtTenSP = new javax.swing.JTextField();
        pnlChucNang = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        lblSoLuong = new javax.swing.JLabel();
        txtSoLuong = new javax.swing.JTextField();
        lblDonGia = new javax.swing.JLabel();
        lblMaNSX = new javax.swing.JLabel();
        txtDonGia = new javax.swing.JTextField();
        btnHienThiTatCa = new javax.swing.JButton();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        comboBoxMucTimKiem = new javax.swing.JComboBox<>();
        comboBoxMaLSP = new javax.swing.JComboBox<>();
        ComboBoxMaNSX = new javax.swing.JComboBox<>();

        xuatExcelFile.setText("Export to excel file");
        xuatExcelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xuatExcelFileActionPerformed(evt);
            }
        });
        rightClickMenu.add(xuatExcelFile);

        nhapExcelFile.setText("Import Excel File\n");
        nhapExcelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nhapExcelFileActionPerformed(evt);
            }
        });
        rightClickMenu.add(nhapExcelFile);

        setPreferredSize(new java.awt.Dimension(681, 540));

        pnlTable.setBackground(new java.awt.Color(255, 255, 255));
        pnlTable.setPreferredSize(new java.awt.Dimension(685, 251));

        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblSanPhamMouseReleased(evt);
            }
        });
        tblScrollPane.setViewportView(tblSanPham);

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(tblScrollPane)
                .addGap(20, 20, 20))
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tblScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
        );

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));
        pnlMain.setForeground(new java.awt.Color(14, 142, 233));
        pnlMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlMainMouseClicked(evt);
            }
        });

        lblTieuDe.setBackground(new java.awt.Color(255, 255, 255));
        lblTieuDe.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        lblTieuDe.setForeground(new java.awt.Color(14, 142, 233));
        lblTieuDe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTieuDe.setText("SẢN PHẨM");

        lblMaSP.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblMaSP.setForeground(new java.awt.Color(14, 142, 233));
        lblMaSP.setText("Mã sản phẩm:");

        lblTenSP.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblTenSP.setForeground(new java.awt.Color(14, 142, 233));
        lblTenSP.setText("Tên sản phẩm:");

        lblMaLSP.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblMaLSP.setForeground(new java.awt.Color(14, 142, 233));
        lblMaLSP.setText("Mã loại sản phẩm:");

        txtMaSP.setBackground(new java.awt.Color(223, 230, 233));
        txtMaSP.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtMaSP.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        txtTenSP.setBackground(new java.awt.Color(223, 230, 233));
        txtTenSP.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtTenSP.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        pnlChucNang.setBackground(new java.awt.Color(255, 255, 255));

        btnThem.setBackground(new java.awt.Color(14, 142, 233));
        btnThem.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/plus_icon.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setBorder(null);
        btnThem.setContentAreaFilled(false);
        btnThem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThem.setIconTextGap(15);
        btnThem.setOpaque(true);
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(14, 142, 233));
        btnXoa.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash_icon.png"))); // NOI18N
        btnXoa.setText("Xoá");
        btnXoa.setBorder(null);
        btnXoa.setContentAreaFilled(false);
        btnXoa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoa.setIconTextGap(15);
        btnXoa.setOpaque(true);
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(14, 142, 233));
        btnSua.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pencil_icon.png"))); // NOI18N
        btnSua.setText("Sửa");
        btnSua.setBorder(null);
        btnSua.setContentAreaFilled(false);
        btnSua.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSua.setIconTextGap(15);
        btnSua.setOpaque(true);
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlChucNangLayout = new javax.swing.GroupLayout(pnlChucNang);
        pnlChucNang.setLayout(pnlChucNangLayout);
        pnlChucNangLayout.setHorizontalGroup(
            pnlChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlChucNangLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(pnlChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnXoa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnThem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .addComponent(btnSua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        pnlChucNangLayout.setVerticalGroup(
            pnlChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChucNangLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        lblSoLuong.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblSoLuong.setForeground(new java.awt.Color(14, 142, 233));
        lblSoLuong.setText("Số lượng:");

        txtSoLuong.setBackground(new java.awt.Color(223, 230, 233));
        txtSoLuong.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtSoLuong.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        lblDonGia.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblDonGia.setForeground(new java.awt.Color(14, 142, 233));
        lblDonGia.setText("Đơn giá:");

        lblMaNSX.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblMaNSX.setForeground(new java.awt.Color(14, 142, 233));
        lblMaNSX.setText("Mã NSX:");

        txtDonGia.setBackground(new java.awt.Color(223, 230, 233));
        txtDonGia.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtDonGia.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        btnHienThiTatCa.setBackground(new java.awt.Color(14, 142, 233));
        btnHienThiTatCa.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnHienThiTatCa.setForeground(new java.awt.Color(255, 255, 255));
        btnHienThiTatCa.setText("Hiển thị tất cả");
        btnHienThiTatCa.setBorder(null);
        btnHienThiTatCa.setContentAreaFilled(false);
        btnHienThiTatCa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHienThiTatCa.setOpaque(true);
        btnHienThiTatCa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHienThiTatCaActionPerformed(evt);
            }
        });

        txtTimKiem.setBackground(new java.awt.Color(223, 230, 233));
        txtTimKiem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtTimKiem.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(223, 230, 233)));

        btnTimKiem.setBackground(new java.awt.Color(14, 142, 233));
        btnTimKiem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search_icon.png"))); // NOI18N
        btnTimKiem.setBorder(null);
        btnTimKiem.setContentAreaFilled(false);
        btnTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTimKiem.setOpaque(true);
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        comboBoxMucTimKiem.setBackground(new java.awt.Color(14, 142, 233));
        comboBoxMucTimKiem.setEditable(true);
        comboBoxMucTimKiem.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        comboBoxMucTimKiem.setForeground(new java.awt.Color(255, 255, 255));
        comboBoxMucTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã SP", "Tên SP", "Số lượng", "Đơn giá", "Mã LSP", "Mã NSX" }));
        comboBoxMucTimKiem.setToolTipText("null");
        comboBoxMucTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        comboBoxMucTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMucTimKiemActionPerformed(evt);
            }
        });

        comboBoxMaLSP.setBackground(new java.awt.Color(223, 230, 233));

        ComboBoxMaNSX.setBackground(new java.awt.Color(223, 230, 233));

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTieuDe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(btnHienThiTatCa, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMaLSP, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtMaSP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(txtTenSP, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxMaLSP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(42, 42, 42)))
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblMaNSX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSoLuong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                            .addComponent(lblDonGia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDonGia, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(ComboBoxMaNSX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(comboBoxMucTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 20, Short.MAX_VALUE))))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addComponent(lblTieuDe, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(txtTenSP)
                            .addComponent(lblDonGia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaLSP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblMaNSX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxMaLSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBoxMaNSX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnHienThiTatCa, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboBoxMucTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents
    DefaultTableModel model = new DefaultTableModel() ;
    DefaultTableModel modelTimKiem;

    boolean flag = true;

    public Vector createHeader(Object[] columnNames) {
        Vector header = new Vector();
        for (Object colName : columnNames) {
            header.add(colName);
        }

        return header;
    }
    
    public void docComboBox() throws Exception{
        NhaSanXuatBUS busMaNSX = new NhaSanXuatBUS();
        LoaiSPBUS busMaLSP = new LoaiSPBUS();
       
            String[] arrayMaNSX = busMaNSX.docComboBoxMaNSX();
            ComboBoxMaNSX.setModel(new javax.swing.DefaultComboBoxModel<>(arrayMaNSX));
            ComboBoxMaNSX = myComboBox(ComboBoxMaNSX, matteGrey);
        
        
        
            String[] arrayMaLSP = busMaLSP.docComboBoxMaLSP();
            comboBoxMaLSP.setModel(new javax.swing.DefaultComboBoxModel<>(arrayMaLSP));
            comboBoxMaLSP = myComboBox(comboBoxMaLSP,matteGrey);
        
    }
    
    public void docComboBoxMaNSX(String ma[]) throws Exception{
        ComboBoxMaNSX.setModel(new javax.swing.DefaultComboBoxModel<>(ma));
    }
    
    public void docComboBoxMaLSP(String ma[]) throws Exception{
        comboBoxMaLSP.setModel(new javax.swing.DefaultComboBoxModel<>(ma));
    }

    public void docDatabase() throws Exception {
        SanPhamBUS bus = new SanPhamBUS();
        if (SanPhamBUS.getDssp() == null) {
            bus.docDSSP();
        }

        String[] columnNames = {"Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Đơn giá","Mã LSP", "Mã NSX"};
        Vector header = createHeader(columnNames);

        if (model.getRowCount() == 0) {
            model = new DefaultTableModel(header, 0);
        }

        for (SanPhamDTO sp : SanPhamBUS.getDssp()) {
            Vector row = new Vector();
            row.add(sp.getMaSP());
            row.add(sp.getTenSP());
            row.add(sp.getSoLuong());
            row.add(sp.getDonGia());
            row.add(sp.getMaLoaiSP());
            row.add(sp.getMaNSX());

            model.addRow(row);
        }

        tblSanPham.setModel(model);
        tblSanPham = initHeaderColor(tblSanPham, 14, 142, 233);

    }
    
     public boolean checkEmptyTxt() {
        if (txtMaSP.getText().equals("") || txtTenSP.getText().equals("")) {
            return true;
        }
        return false;
    }
    
    void autoGenerateID(JTextField txt) throws Exception
    {
        SanPhamBUS bus = new SanPhamBUS();
        String ID = bus.taoIdTuDong();
        txt.setText(ID);
    }

    public void hienCacNutChucNang() {
        btnThem.setEnabled(true);
        btnSua.setEnabled(true);
        btnXoa.setEnabled(true);
    }

    public void anCacNutChucNang() {
        btnThem.setEnabled(false);
        btnSua.setEnabled(false);
        btnXoa.setEnabled(false);
    }
    private void tblSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamMouseClicked
        // TODO add your handling code here:
        int i = tblSanPham.getSelectedRow();
        if (i >= 0) {
            SanPhamBUS bus = new SanPhamBUS();
            SanPhamDTO sp = new SanPhamDTO();
            if (flag == true) {
                sp = SanPhamBUS.getDssp().get(i);
            } else {
                int index = bus.timIndex(modelTimKiem.getValueAt(i, 0).toString());
                sp = SanPhamBUS.getDssp().get(index);
            }

            txtMaSP.setText(sp.getMaSP());
            txtTenSP.setText(sp.getTenSP());
            txtSoLuong.setText(Integer.toString(sp.getSoLuong()));
            txtDonGia.setText(Float.toString(sp.getDonGia()));
            comboBoxMaLSP.setSelectedItem(sp.getMaLoaiSP());
            ComboBoxMaNSX.setSelectedItem(sp.getMaNSX());

            btnXoa.setEnabled(true);
            btnSua.setEnabled(true);
        }
    }//GEN-LAST:event_tblSanPhamMouseClicked

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        if (checkEmptyTxt() == true)
        return;
        else {
            SanPhamBUS bus = new SanPhamBUS();

            if (bus.kiemTraTrung(txtMaSP.getText())) {
                JOptionPane.showMessageDialog(this, "Mã sản phẩm đã tồn tại. Mời nhập Mã sản phẩm khác!");
                return;
            }

            SanPhamDTO sp = new SanPhamDTO();
            sp.setMaSP(txtMaSP.getText());
            sp.setTenSP(txtTenSP.getText());
            sp.setSoLuong(Integer.parseInt(txtSoLuong.getText()));
            sp.setDonGia(Float.parseFloat(txtDonGia.getText()));
            sp.setMaLoaiSP(comboBoxMaLSP.getSelectedItem().toString());
            sp.setMaNSX(ComboBoxMaNSX.getSelectedItem().toString());

            try {
                bus.them(sp);
            } catch (Exception ex) {
                Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
            }

            String[] columnNames = {"Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Đơn giá","Mã LSP", "Mã NSX"};
            Vector header = createHeader(columnNames);

            if (model.getRowCount() == 0) {
                model = new DefaultTableModel(header, 0);
            }

            Vector row = new Vector();
            row.add(sp.getMaSP());
            row.add(sp.getTenSP());
            row.add(sp.getSoLuong());
            row.add(sp.getDonGia());
            row.add(sp.getMaLoaiSP());
            row.add(sp.getMaNSX());

            model.addRow(row);
            tblSanPham.setModel(model);
            
            String [] arraySP = new String[SanPhamBUS.getDssp().size()];
            try {
              arraySP = bus.docComboBoxMaSP();
            } catch (Exception ex) {
                Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                thongKe.docComboBoxSP(arraySP);

            } catch (Exception ex) {
                Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
            }

            JOptionPane.showMessageDialog(this, "Thêm thành công!");
            try {
                resetTxt();
            } catch (Exception ex) {
                Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        int i = tblSanPham.getSelectedRow();
        if (i >= 0) {
            int selection = JOptionPane.showConfirmDialog(this, "Bạn muốn xóa dòng này?", "Thông báo xác nhận", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (selection == JOptionPane.YES_OPTION) {
                SanPhamBUS bus = new SanPhamBUS();
                if (flag == true)
                {
                    String maSP = model.getValueAt(i, 0).toString();
                    try {
                        bus.xoa(maSP);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Bạn không thể xóa dòng này!");
                        return;
                    }

                    model.removeRow(i);
                    tblSanPham.setModel(model);
                }
                else
                {
                    String maSP = modelTimKiem.getValueAt(i, 0).toString();
                    try {
                        bus.xoa(maSP);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Bạn không thể xóa dòng này!");
                        return;
                    }

                    int index = bus.timIndex(maSP);

                    modelTimKiem.removeRow(i);
                    tblSanPham.setModel(modelTimKiem);

                    model.removeRow(index);
                }

                btnXoa.setEnabled(false);
                btnSua.setEnabled(false);
                
            
                String [] arraySP = new String[SanPhamBUS.getDssp().size()];
                try {
                  arraySP = bus.docComboBoxMaSP();
                } catch (Exception ex) {
                    Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    thongKe.docComboBoxSP(arraySP);

                } catch (Exception ex) {
                    Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
                }

                JOptionPane.showMessageDialog(this, "Xóa thành công!");
                try {
                    resetTxt();
                } catch (Exception ex) {
                    Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        int temp = -1;
        int i = tblSanPham.getSelectedRow();
        if (i >= 0) {
            SanPhamBUS bus = new SanPhamBUS();
            String maSPCu;
            if (flag == true) {
                maSPCu = model.getValueAt(i, 0).toString();
            } else {
                temp = i;
                maSPCu = modelTimKiem.getValueAt(temp, 0).toString();
                i = bus.timIndex(maSPCu);
            }

            if (bus.kiemTraTrung(comboBoxMaLSP.getSelectedItem().toString(), maSPCu)) {
                JOptionPane.showMessageDialog(this, "Mã sản phẩm đã tồn tại. Mời nhập Mã sản phẩm khác!");
                return;
            } else {

                SanPhamDTO sp = new SanPhamDTO();
                sp.setMaSP(txtMaSP.getText());
                sp.setTenSP(txtTenSP.getText());
                sp.setSoLuong(Integer.parseInt(txtSoLuong.getText()));
                sp.setDonGia(Float.parseFloat(txtDonGia.getText()));
                sp.setMaLoaiSP(comboBoxMaLSP.getSelectedItem().toString());
                sp.setMaNSX(ComboBoxMaNSX.getSelectedItem().toString());

                SanPhamDTO old = SanPhamBUS.getDssp().get(i);

                try {
                    bus.sua(sp, old);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Bạn không thể thay đổi Mã sản phẩm này!");
                    return;
                }

                model.setValueAt(sp.getMaSP(), i, 0);
                model.setValueAt(sp.getTenSP(), i, 1);
                model.setValueAt(sp.getSoLuong(), i, 2);
                model.setValueAt(sp.getDonGia(), i, 3);
                model.setValueAt(sp.getMaLoaiSP(), i, 4);
                model.setValueAt(sp.getMaNSX(), i, 5);

                if (flag == false) {
                    modelTimKiem.setValueAt(sp.getMaSP(), temp, 0);
                    modelTimKiem.setValueAt(sp.getTenSP(), temp, 1);
                    modelTimKiem.setValueAt(sp.getSoLuong(), temp, 2);
                    modelTimKiem.setValueAt(sp.getDonGia(), temp, 3);
                    modelTimKiem.setValueAt(sp.getMaLoaiSP(), temp, 4);
                    modelTimKiem.setValueAt(sp.getMaNSX(), temp, 5);
                }
                
                hienCacNutChucNang();
            
                String [] arraySP = new String[SanPhamBUS.getDssp().size()];
                try {
                  arraySP = bus.docComboBoxMaSP();
                } catch (Exception ex) {
                    Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    thongKe.docComboBoxSP(arraySP);

                } catch (Exception ex) {
                    Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
                }

                JOptionPane.showMessageDialog(this, "Sửa thành công!");
                try {
                    resetTxt();
                } catch (Exception ex) {
                    Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnHienThiTatCaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHienThiTatCaActionPerformed
        // TODO add your handling code here:
        flag = true;
        tblSanPham.setModel(model);
        SanPhamBUS bus = new SanPhamBUS();
        String [] arrayMaSP = new String[SanPhamBUS.getDssp().size()];
            try{
                arrayMaSP = bus.docComboBoxMaSP();
            } catch (Exception ex) {
                Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
            }
            
//            try{
//                cthd.docComboBoxMaSP(arrayMaSP);
//                ctkm.docComboBoxMaSP(arrayMaSP);
//                ctpn.docComboBoxMaSP(arrayMaSP);
//            } catch (Exception ex) {
//                Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
//            }
        btnThem.setEnabled(true);
        tblSanPham = initHeaderColor(tblSanPham, 14, 142, 233);
        tblSanPham = setColumnWidth(tblSanPham);
    }//GEN-LAST:event_btnHienThiTatCaActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
        String mucTimKiem = comboBoxMucTimKiem.getSelectedItem().toString();
        String duLieu = txtTimKiem.getText();

        String[] columnNames = {"Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Đơn giá","Mã LSP", "Mã NSX"};
        Vector header = createHeader(columnNames);

        if (duLieu.equals("") == false) {
            ArrayList<SanPhamDTO> tempArr = new ArrayList<SanPhamDTO>();
            SanPhamBUS bus = new SanPhamBUS();

            tempArr = bus.timKiem(mucTimKiem, duLieu);

            if (tempArr.size() > 0) {
                modelTimKiem = new DefaultTableModel();

                if (modelTimKiem.getRowCount() == 0) {
                    modelTimKiem = new DefaultTableModel(header, 0);
                }

                for (SanPhamDTO sp : tempArr) {
                    Vector row = new Vector();
                    row.add(sp.getMaSP());
                    row.add(sp.getTenSP());
                    row.add(sp.getSoLuong());
                    row.add(sp.getDonGia());
                    row.add(sp.getMaLoaiSP());
                    row.add(sp.getMaNSX());

                    modelTimKiem.addRow(row);
                }
                tblSanPham.setModel(modelTimKiem);
                tblSanPham = initHeaderColor(tblSanPham, 14, 142, 233);
                tblSanPham = setColumnWidth(tblSanPham);

                flag = false;
                anCacNutChucNang();

            } else {
                JOptionPane.showMessageDialog(this, "Rất tiếc. Dữ liệu không được tìm thấy!");
            }
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void comboBoxMucTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMucTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxMucTimKiemActionPerformed

    private void pnlMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlMainMouseClicked
        try {
            // TODO add your handling code here:
            resetTxt();
        } catch (Exception ex) {
            Logger.getLogger(SanPhamFRM.class.getName()).log(Level.SEVERE, null, ex);
        }
        tblSanPham.clearSelection();

    }//GEN-LAST:event_pnlMainMouseClicked

    private void xuatExcelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xuatExcelFileActionPerformed
        String[] columnNames = {"Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Đơn giá","Mã LSP", "Mã NSX"};
        try {
            XuatExcel xuat = new XuatExcel(tblSanPham, columnNames, "Sản Phẩm");
        } catch (IOException ex) {
            Logger.getLogger(HoaDonFRM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_xuatExcelFileActionPerformed

    private void tblSanPhamMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamMouseReleased
        // TODO add your handling code here:
         if(evt.isPopupTrigger())
        {
            rightClickMenu.show(tblSanPham, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblSanPhamMouseReleased

    private void nhapExcelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhapExcelFileActionPerformed
        // TODO add your handling code here:
        nhapExcel nhap = new nhapExcel(tblSanPham);
        DefaultTableModel newModel = nhap.importExcel();
        if(newModel.getRowCount() > 0)
        {
            tblSanPham.setModel(newModel);
            tblSanPham = initHeaderColor(tblSanPham, 14, 142, 233);
        }
    }//GEN-LAST:event_nhapExcelFileActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxMaNSX;
    private javax.swing.JButton btnHienThiTatCa;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> comboBoxMaLSP;
    private javax.swing.JComboBox<String> comboBoxMucTimKiem;
    private javax.swing.JLabel lblDonGia;
    private javax.swing.JLabel lblMaLSP;
    private javax.swing.JLabel lblMaNSX;
    private javax.swing.JLabel lblMaSP;
    private javax.swing.JLabel lblSoLuong;
    private javax.swing.JLabel lblTenSP;
    private javax.swing.JLabel lblTieuDe;
    private javax.swing.JMenuItem nhapExcelFile;
    private javax.swing.JPanel pnlChucNang;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JPopupMenu rightClickMenu;
    private javax.swing.JTable tblSanPham;
    private javax.swing.JScrollPane tblScrollPane;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtMaSP;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTenSP;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JMenuItem xuatExcelFile;
    // End of variables declaration//GEN-END:variables
}
